<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Java基础】基础语法</title>
      <link href="/2023/02/19/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/02/19/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】基础语法">【Java基础】基础语法</h1><p><strong>Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作</strong>。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li class="lvl-2"><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p></li><li class="lvl-2"><p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p></li><li class="lvl-2"><p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p></li></ul><h2 id="1-第一个Java程序">1.第一个Java程序</h2><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstJavaProgram</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/* 第一个Java程序.      * 它将打印字符串 Hello World    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 Hello World</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-基本语法">2.基本语法</h2><p>编写Java程序时，应注意以下几点：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>大小写敏感</strong>：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p></li><li class="lvl-2"><p><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p></li><li class="lvl-2"><p><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p></li><li class="lvl-2"><p><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（<strong>如果文件名和类名不相同则会导致编译错误</strong>）。</p></li><li class="lvl-2"><p><strong>主方法入口</strong>：所有的Java 程序由<code>public static void main(String[] args)</code> 方法开始执行。</p></li></ul><h2 id="3-Java标识符">3.Java标识符</h2><p>Java所有的组成部分都需要<mark>名字</mark>。类名、变量名以及方法名都被称为标识符。</p><p>关于Java标识符，有以下几点需要注意：</p><ul class="lvl-0"><li class="lvl-2"><p>所有的标识符都应该<strong>以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始</strong></p></li><li class="lvl-2"><p>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</p></li><li class="lvl-2"><p><strong>关键字不能用作标识符</strong></p></li><li class="lvl-2"><p>标识符是<strong>大小写敏感</strong>的</p></li><li class="lvl-2"><p>合法标识符举例：age、$salary、_value、__1_value</p></li><li class="lvl-2"><p>非法标识符举例：123abc、-salary</p></li></ul><h2 id="4-Java修饰符">4.Java修饰符</h2><p>像其他语言一样，Java可以使用修饰符来<mark>修饰类中方法和属性</mark>。主要有两类修饰符：</p><ul class="lvl-0"><li class="lvl-2"><p><mark>访问控制修饰符</mark> : <code>default</code>, <code>public</code> , <code>protected</code>, <code>private</code></p></li><li class="lvl-2"><p><mark>非访问控制修饰符</mark> : <code>final</code>, <code>abstract</code>, <code>static</code>，<code>synchronized</code> 和 <code>volatile</code></p></li></ul><p>在后面的章节中我们会深入讨论Java修饰符。</p><h2 id="5-Java变量">5.Java变量</h2><p>Java中主要有如下几种类型的变量</p><ul class="lvl-0"><li class="lvl-2"><p>局部变量</p></li><li class="lvl-2"><p>类变量（静态变量）</p></li><li class="lvl-2"><p>成员变量（非静态变量）</p></li></ul><h2 id="6-Java数组">6.Java数组</h2><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p><h2 id="7-Java枚举">7.Java枚举</h2><p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug 。</p><p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p><p><strong>实例：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FreshJuice</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">enum</span> <span class="token class-name">FreshJuiceSize</span><span class="token punctuation">&#123;</span> <span class="token constant">SMALL</span><span class="token punctuation">,</span> <span class="token constant">MEDIUM</span><span class="token punctuation">,</span> <span class="token constant">LARGE</span> <span class="token punctuation">&#125;</span>   <span class="token class-name">FreshJuiceSize</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreshJuiceTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">FreshJuice</span> juice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FreshJuice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      juice<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token class-name">FreshJuice<span class="token punctuation">.</span> FreshJuiceSize</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span> <span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**注意：**枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p><h2 id="8-Java关键字">8.Java关键字</h2><p>下面列出了Java保留字。这些保留字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">abstract</td><td style="text-align:left">抽象方法，抽象类的修饰符</td></tr><tr><td style="text-align:left">assert</td><td style="text-align:left">断言条件是否满足</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">布尔数据类型</td></tr><tr><td style="text-align:left">break</td><td style="text-align:left">跳出循环或者label代码段</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">8-bit 有符号数据类型</td></tr><tr><td style="text-align:left">case</td><td style="text-align:left">switch语句的一个条件</td></tr><tr><td style="text-align:left">catch</td><td style="text-align:left">和try搭配捕捉异常信息</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">16-bit Unicode字符数据类型</td></tr><tr><td style="text-align:left">class</td><td style="text-align:left">定义类</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">未使用</td></tr><tr><td style="text-align:left">continue</td><td style="text-align:left">不执行循环体剩余部分</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">switch语句中的默认分支</td></tr><tr><td style="text-align:left">do</td><td style="text-align:left">循环语句，循环体至少会执行一次</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">64-bit双精度浮点数</td></tr><tr><td style="text-align:left">else</td><td style="text-align:left">if条件不成立时执行的分支</td></tr><tr><td style="text-align:left">enum</td><td style="text-align:left">枚举类型</td></tr><tr><td style="text-align:left">extends</td><td style="text-align:left">表示一个类是另一个类的子类</td></tr><tr><td style="text-align:left">final</td><td style="text-align:left">表示一个值在初始化之后就不能再改变了 表示方法不能被重写，或者一个类不能有子类</td></tr><tr><td style="text-align:left">finally</td><td style="text-align:left">为了完成执行的代码而设计的，主要是为了程序的健壮性和完整性，无论有没有异常发生都执行代码。</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">32-bit单精度浮点数</td></tr><tr><td style="text-align:left">for</td><td style="text-align:left">for循环语句</td></tr><tr><td style="text-align:left">goto</td><td style="text-align:left">未使用</td></tr><tr><td style="text-align:left">if</td><td style="text-align:left">条件语句</td></tr><tr><td style="text-align:left">implements</td><td style="text-align:left">表示一个类实现了接口</td></tr><tr><td style="text-align:left">import</td><td style="text-align:left">导入类</td></tr><tr><td style="text-align:left">instanceof</td><td style="text-align:left">测试一个对象是否是某个类的实例</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">32位整型数</td></tr><tr><td style="text-align:left">interface</td><td style="text-align:left">接口，一种抽象的类型，仅有方法和常量的定义</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">64位整型数</td></tr><tr><td style="text-align:left">native</td><td style="text-align:left">表示方法用非java代码实现</td></tr><tr><td style="text-align:left">new</td><td style="text-align:left">分配新的类实例</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">一系列相关类组成一个包</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">表示字段只能通过类或者其子类访问 子类或者在同一个包内的其他类</td></tr><tr><td style="text-align:left">public</td><td style="text-align:left">表示共有属性或者方法</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">方法返回值</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">16位数字</td></tr><tr><td style="text-align:left">static</td><td style="text-align:left">表示在类级别定义，所有实例共享的</td></tr><tr><td style="text-align:left">strictfp</td><td style="text-align:left">浮点数比较使用严格的规则</td></tr><tr><td style="text-align:left">super</td><td style="text-align:left">表示基类</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">选择语句</td></tr><tr><td style="text-align:left">synchronized</td><td style="text-align:left">表示同一时间只能由一个线程访问的代码块</td></tr><tr><td style="text-align:left">this</td><td style="text-align:left">表示调用当前实例 或者调用另一个构造函数</td></tr><tr><td style="text-align:left">throw</td><td style="text-align:left">抛出异常</td></tr><tr><td style="text-align:left">throws</td><td style="text-align:left">定义方法可能抛出的异常</td></tr><tr><td style="text-align:left">transient</td><td style="text-align:left">修饰不要序列化的字段</td></tr><tr><td style="text-align:left">try</td><td style="text-align:left">表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">标记方法不返回任何值</td></tr><tr><td style="text-align:left">volatile</td><td style="text-align:left">标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td style="text-align:left">while</td><td style="text-align:left">while循环</td></tr></tbody></table><hr><h2 id="9-Java注释">9.Java注释</h2><p>类似于C/C++，Java也支持单行以及多行注释。注释中的字符将被Java编译器忽略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstJavaProgram</span><span class="token punctuation">&#123;</span>   <span class="token comment">/* 这是第一个Java程序    *它将打印Hello World    * 这是一个多行注释的示例    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// 这是单行注释的示例</span>       <span class="token comment">/* 这个也是单行注释的示例 */</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="10-Java-空行">10.Java 空行</h2><p>空白行，或者只有注释的行，Java编译器都会忽略掉。</p><hr><h2 id="11-继承">11.继承</h2><p>在Java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p><h2 id="12-接口">12.接口</h2><p>在Java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p><p>下一节介绍Java编程中的类和对象。之后你将会对Java中的类和对象有更清楚的认识。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客网站搭建</title>
      <link href="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="🐳免费快速搭建Hexo博客网站并部署上线">🐳免费快速搭建Hexo博客网站并部署上线</h1><h1 id="🌴一、Hexo简介">🌴一、Hexo简介</h1><p><code>Hexo</code> <mark>是一个快速、简洁且高效的博客框架</mark> 。基于<code>Node.js</code>，它可以帮助您使用<code>Markdown</code> (或其他渲染引擎) 轻松创建网站，具有强大的插件系统和主题支持，可以让您构建定制的网站。Hexo的文件结构清晰，可以轻松管理您的内容。它提供了一个强大的命令行界面，可以让您快速开始创建内容，并且它拥有一个强大的API，可以让您在您的工作流程中自定义您的网站构建过程。</p><p>官网地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213222421173.png" alt="image-20230213222421173"></p><h1 id="🌴二、安装前提">🌴二、安装前提</h1><p>安装 <code>Hexo</code> 相当简单，只需要先安装下列应用程序即可：</p><ul class="lvl-0"><li class="lvl-2"><p><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 <mark>Node.js 12.0 及以上版本</mark>)</p></li><li class="lvl-2"><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装<code>Node.js</code>是因为<code>Hexo</code> 是基于<code>Node.js</code>，而Git是后面部署网站需要，它可以将我们的网站代码(push)推送到服务器上面去。</p><h2 id="🧊1、安装Node-js">🧊1、安装Node.js</h2><p>官方网站：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>中文官方网站：<a href="http://nodejs.cn/">http://nodejs.cn/g)</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/nodejs-logo-585x293.png" alt="nodejs-logo-585x293"></p><p>安装过程比较简单，可以参考文章👉<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js详细安装教程</a></p><p>如果你是从事IT相关行业，经常与 <code>Node.js</code>打交道，不妨试下<code>nvm</code>安装，<mark>它是一个nodejs的版本管理工具</mark>。</p><p><code>nvm</code> 安装可以参考文章👉<a href="https://blog.csdn.net/mjh1667002013/article/details/128943885?spm=1001.2014.3001.5502">nvm详细安装教程</a></p><p>如果你的电脑已经具备 <code>Node.js</code> 环境，请直接一下准备<code>Git</code>环境。</p><h2 id="🧊2、安装Git">🧊2、安装Git</h2><p>官方网站：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213232103442.png" alt="image-20230213232103442"></p><pre><code>安装过程同样简单，下载安装即可，可以参考文章👉[Git详细安装教程]()，已有Git环境直接跳过这步。</code></pre><h2 id="🧊3、检查node和Git环境">🧊3、检查node和Git环境</h2><pre><code>打开`cmd`查看：</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看node版本信息</span>node <span class="token operator">-</span>v<span class="token comment">//查看Git版本信息</span> git <span class="token operator">--</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>出现版本信息则表示环境没问题。</code></pre><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213233055632.png" alt="image-20230213233055632"></p><h1 id="🌴三、安装Hexo">🌴三、安装Hexo</h1><p>随便准备一个test文件夹，cmd进去。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213233708163.png" alt="image-20230213233708163"></p><ol><li class="lvl-3"><p>全局安装<code>hexo-cli</code></p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li class="lvl-3"><p>安装 <code>Hexo</code> 完成后，请执行下列命令，<code>Hexo</code> 将会在指定文件夹中新建所需要的文件。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213234307796.png" alt="image-20230213234307796"></p><ol start="3"><li class="lvl-3"><p>安装依赖</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">cd blognpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>安装完后会生成一个依赖包文件夹和一个依赖包相关信息`json`文件。</code></pre><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213234757111.png" alt="image-20230213234757111"></p><p>最后一步，使用<code>hexo s</code>启动，并访问<a href="http://localhost:4000/">http://localhost:4000/</a>。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214001222155.png" alt="image-20230214001222155"></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214001328309.png" alt="image-20230214001328309"></p><pre><code>安装完毕，就是这么简单，快速、简洁且高效的`Hexo`博客框架，当然现在的博客还只是最初始的模样，后续我们可以使用主题来美化它，填充自己的博客内容来丰满它，让你的个人博客变得万人瞩目!接下来我们来了解几个常用命令。</code></pre><h1 id="🌴四、常用相关命令">🌴四、常用相关命令</h1><ol><li class="lvl-3"><p><code>init</code>：初始化文件夹。如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo init [folder]//例如：hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li class="lvl-3"><p><code>new</code>：新建一篇文章，如果标题包含空格的话，请使用引号括起来。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo new <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li class="lvl-3"><p><code>generate</code>：生成静态文件。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo generate//该命令可以简写为：hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li class="lvl-3"><p><code>server</code>：启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo server//简写为hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li class="lvl-3"><p><code>deploy</code>：</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li class="lvl-3"><p><code>version</code>：显示 <code>Hexo</code> 版本。</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面便是常用的几个命令，已经够用了，当然命令还不止这些，其他命令在后面开始写作时再深入全面学习。</p><h1 id="🌴五、快速部署到Github服务器">🌴五、快速部署到Github服务器</h1><h2 id="🧊1、什么是Github？">🧊1、什么是Github？</h2><p>​<code>GitHub</code>是一个开源的版本控制系统，可以用来存储和跟踪代码以及文档的变化，并且可以与其他开发者共享项目。它使用<code>Git</code>本地存储技术，允许开发人员将代码提交到共享存储库中，以便在变更跟踪和版本控制中发挥作用。<code>GitHub</code>也提供了一个<code>Web</code>界面，可以让开发者查看代码，分享和管理它们。</p><p>​这就是之前为什么要安装<code>Git</code>，正所谓磨刀不误砍柴工，前面我们安装的Git在这里起到关键作用。</p><h2 id="🧊2、什么是GitHub-Pages？">🧊2、什么是GitHub Pages？</h2><p>​<code>GitHub Pages</code> 是 <code>GitHub</code> 上一项免费的托管服务，它可以让用户将静态网页文件、图片、视频和其他媒体文件托管在 <code>GitHub</code> 上，而无需购买虚拟主机或服务器空间。</p><p>​了解什么是<code>GitHub Pages</code> 了解接下来部署到Github服务器的原理，为什么我们可以不购买虚拟主机或服务器空间就能够免费部署博客网站，原理就是使用<code>GitHub Pages</code> 。</p><h2 id="🧊3、什么是Gitee-Pages？">🧊3、什么是Gitee Pages？</h2><p>​<code>Gitee Pages</code>是码云提供的免费托管静态网页的服务。它可以让你将自己的静态网页托管在码云上，免费发布个人博客、项目介绍、文档等内容。</p><blockquote><p>​GitHub Pages和Gitee Pages其实是一个东西，为什么讲了GitHub Pages还有讲Gitee Pages，因为GitHub的服务器位于国外，如果你没有梯子或者插件加速可能会访问慢，而Gitee号称国内版的GitHub，在国内当然访问快，所以这里提供了第二种方案，部署到Gitee上面去。</p></blockquote><h2 id="🧊3、注册Github">🧊3、注册Github</h2><p>官网地址：<a href="https://github.com/">https://github.com/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214003209235.png" alt="image-20230214003209235"></p><p>​邮箱注册即可，因为Github官网服务器位于国外，所以有时间访问有点慢很正常，解决的办法通常可以使用梯子（<code>vpn</code>）或者浏览器Github加速插件来加速。</p><h2 id="🧊4、创建Github仓库">🧊4、创建Github仓库</h2><p>首先在首页点击创建仓库。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214004728913.png" alt="image-20230214004728913"></p><p>进入里面输入仓库名后点击创建。</p><p>仓库名创建规则：<code>用户名.github.io</code>，必须是用户名加github.io后缀，因为我们使用的是Github pages。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214005050634.png" alt="image-20230214005050634"></p><p>​创建完后进入该仓库，可以看到<code>HTTPS</code>地址：<a href="https://github.com/1976083684/1976083684.github.io.git">https://github.com/1976083684/1976083684.github.io.git</a>，后面会使用Git通过该地址将代码上传到此处，所以刚创建的仓库是没有下面的内容。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214005443140.png" alt="image-20230214005443140"></p><h2 id="🧊5、一键部署">🧊5、一键部署</h2><blockquote><p>回到我们当初安装时的cmd界面，部署的操作都在上面进行。</p></blockquote><p>首先安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步在<code>_config.yml</code>文件中添加配置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/1976083684/1976083684.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214010343249.png" alt="image-20230214010343249"> ·</p><p>第三步生成静态文件。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo g 或者 hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后一步部署。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo d 或者 hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署完后，在Github查看上传的代码，并访问<a href="https://1976083684.github.io">1976083684.github.io</a>即可在线访问博客网站！</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214011022735.png" alt="image-20230214011022735"></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214011100270.png" alt="image-20230214011100270"></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/16/hello-world/"/>
      <url>/2023/02/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
